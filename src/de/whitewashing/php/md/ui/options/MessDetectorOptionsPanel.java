/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CodeSnifferPanel2.java
 *
 * Created on Nov 17, 2009, 1:45:25 PM
 */
package de.whitewashing.php.md.ui.options;

import java.io.File;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

/**
 *
 * @author petr
 */
public class MessDetectorOptionsPanel extends javax.swing.JPanel {

    /**
     * Suffix used for the last selected codesniffer directory.
     */
    private static final String CODE_SNIFFER_LAST_FOLDER_SUFFIX = ".codeSniffer";

    private MessDetectorOptions options = null;

    public MessDetectorOptionsPanel(MessDetectorOptions options) {
        this.options = options;
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelStandard = new javax.swing.JLabel();
        inputBoxStandard = new javax.swing.JComboBox();
        checkBoxShowWarnings = new javax.swing.JCheckBox();
        codeSnifferLabel = new javax.swing.JLabel();
        codeSnifferTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();

        setNextFocusableComponent(this);
        setPreferredSize(new java.awt.Dimension(612, 322));

        labelStandard.setText(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "LBL_STANDARD")); // NOI18N

        inputBoxStandard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zend", "PEAR", "PHPCS", "Squiz", "MySource" }));

        checkBoxShowWarnings.setText(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "LBL_SHOW_WORNINGS")); // NOI18N

        codeSnifferLabel.setText(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "CodeSnifferOptionsPanel.codeSnifferLabel.text")); // NOI18N

        codeSnifferTextField.setText(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "CodeSnifferOptionsPanel.codeSnifferTextField.text")); // NOI18N

        browseButton.setText(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "CodeSnifferOptionsPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(codeSnifferLabel)
                    .add(labelStandard))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(checkBoxShowWarnings, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, inputBoxStandard, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, codeSnifferTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 365, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(codeSnifferLabel)
                    .add(codeSnifferTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(inputBoxStandard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelStandard))
                .add(18, 18, 18)
                .add(checkBoxShowWarnings)
                .addContainerGap(208, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(MessDetectorOptionsPanel.class, "CodeSnifferPanel.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        File codeSnifferScript = new FileChooserBuilder(MessDetectorOptionsPanel.class.getName() + CODE_SNIFFER_LAST_FOLDER_SUFFIX)
                .setTitle(NbBundle.getMessage(MessDetectorOptionsPanel.class, "LBL_CodeSnifferSelect"))
                .setFilesOnly(true)
                .showOpenDialog();
        if (codeSnifferScript != null) {
            codeSnifferScript = FileUtil.normalizeFile(codeSnifferScript);
            codeSnifferTextField.setText(codeSnifferScript.getAbsolutePath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    void load() {
        inputBoxStandard.removeAllItems();
        for (String standard : this.options.getCodingStandards()) {
            inputBoxStandard.addItem(standard);
        }

        inputBoxStandard.setSelectedItem(options.getCodingStandard());
        checkBoxShowWarnings.setSelected(options.hasShowWarnings());
        codeSnifferTextField.setText(options.getShellScript());
    }

    void store() {
        // Only add when a standard exists
        options.setCodingStandard((String) inputBoxStandard.getSelectedItem());
        options.setShowWarnings(checkBoxShowWarnings.isSelected());
        options.setShellScript(codeSnifferTextField.getText());

        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox checkBoxShowWarnings;
    private javax.swing.JLabel codeSnifferLabel;
    private javax.swing.JTextField codeSnifferTextField;
    private javax.swing.JComboBox inputBoxStandard;
    private javax.swing.JLabel labelStandard;
    // End of variables declaration//GEN-END:variables
}
